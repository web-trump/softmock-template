[{"/Users/lishengang/my/soft-mock-template/src/index.tsx":"1","/Users/lishengang/my/soft-mock-template/src/reportWebVitals.ts":"2","/Users/lishengang/my/soft-mock-template/src/App.tsx":"3","/Users/lishengang/my/soft-mock-template/src/components/RightArea/index.tsx":"4","/Users/lishengang/my/soft-mock-template/src/components/LeftArea/index.tsx":"5","/Users/lishengang/my/soft-mock-template/src/api/index.ts":"6","/Users/lishengang/my/soft-mock-template/src/api/constant.ts":"7","/Users/lishengang/my/soft-mock-template/src/api/server.ts":"8","/Users/lishengang/my/soft-mock-template/src/components/store.ts":"9","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestHeader/index.tsx":"10","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestCookie/index.tsx":"11","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseBody/index.tsx":"12","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseHeader/index.tsx":"13","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseTs/index.tsx":"14","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestBody/index.tsx":"15","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestTs/index.tsx":"16"},{"size":449,"mtime":1611401949815,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1609753455358,"results":"19","hashOfConfig":"18"},{"size":295,"mtime":1611399151641,"results":"20","hashOfConfig":"18"},{"size":5729,"mtime":1612104364756,"results":"21","hashOfConfig":"18"},{"size":3535,"mtime":1612073555456,"results":"22","hashOfConfig":"18"},{"size":727,"mtime":1611920241756,"results":"23","hashOfConfig":"18"},{"size":179,"mtime":1609989580471,"results":"24","hashOfConfig":"18"},{"size":324,"mtime":1609998730863,"results":"25","hashOfConfig":"18"},{"size":6044,"mtime":1612104614572,"results":"26","hashOfConfig":"18"},{"size":1414,"mtime":1612073674014,"results":"27","hashOfConfig":"18"},{"size":1815,"mtime":1612073685182,"results":"28","hashOfConfig":"18"},{"size":1733,"mtime":1612103918274,"results":"29","hashOfConfig":"18"},{"size":1416,"mtime":1612073631360,"results":"30","hashOfConfig":"18"},{"size":1007,"mtime":1612073646141,"results":"31","hashOfConfig":"18"},{"size":1068,"mtime":1612073696391,"results":"32","hashOfConfig":"18"},{"size":937,"mtime":1612073665075,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"12xmujw",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/lishengang/my/soft-mock-template/src/index.tsx",[],["74","75"],"/Users/lishengang/my/soft-mock-template/src/reportWebVitals.ts",[],"/Users/lishengang/my/soft-mock-template/src/App.tsx",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/index.tsx",["76","77"],"import { observer } from \"mobx-react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Table, Switch, Button, Tabs, Input, Tag, notification, Empty } from \"antd\";\nimport cls from \"classnames\";\n\nimport store from \"../store\";\nimport RequestHeader from \"./components/RequestHeader\";\nimport RequestCookie from \"./components/RequestCookie\";\nimport RequestBody from \"./components/RequestBody\";\nimport RequestTs from \"./components/RequestTs\";\nimport ResponseHeader from \"./components/ResponseHeader\";\nimport ResponseBody from \"./components/ResponseBody\";\nimport ResponseTs from \"./components/ResponseTs\";\nimport \"./index.less\";\n\nconst { TabPane } = Tabs;\n\nfunction RightArea() {\n  const {\n    currentRequest,\n    codeMode,\n    currentRequestHeader,\n    currentUrl,\n    history,\n    updateCurrentRequest,\n    Delete,\n  } = store;\n  const [isListen, setIsListen] = useState<boolean>(false);\n  const [fullScreen, setFullScreen] = useState<boolean>(false);\n  const [activeKey, setActiveKey] = useState<\"1\" | \"2\" | \"3\">(\"1\");\n  const [activeKeyReq, setActiveKeyReq] = useState<\"1\" | \"2\" | \"3\" | \"4\">(\"1\");\n  const showNotification = async () => {\n    await Delete();\n    notification.info({\n      message: \"删除成功\",\n      description: currentUrl,\n    });\n  };\n  const changeListen = async (value: boolean) => {\n    currentRequest.status = value ? \"1\" : \"0\";\n    setIsListen(value);\n    updateCurrentRequest({ ...currentRequest });\n  };\n  useEffect(() => {\n    setIsListen(+currentRequest?.status === 1);\n  }, [currentRequest]);\n  const Title = (\n    <div className=\"title\">\n      {fullScreen && <div className=\"current-url\">{currentUrl}</div>}\n      <Switch\n        checkedChildren=\"监听\"\n        unCheckedChildren=\"关闭\"\n        checked={isListen}\n        onClick={changeListen}\n      />\n      <div\n        style={{\n          width: \"8px\",\n        }}\n      ></div>\n      {fullScreen ? (\n        <Button\n          className=\"full-screen-btn\"\n          shape=\"round\"\n          size=\"small\"\n          onClick={() => setFullScreen(false)}\n        >\n          关闭全屏\n        </Button>\n      ) : (\n        <Button\n          className=\"full-screen-btn\"\n          shape=\"round\"\n          size=\"small\"\n          onClick={() => setFullScreen(true)}\n        >\n          全屏\n        </Button>\n      )}\n\n      <Button type=\"primary\" danger shape=\"round\" size=\"small\" onClick={showNotification}>\n        删除\n      </Button>\n    </div>\n  );\n  const RequestTitle = (\n    <div\n      style={{\n        color: \"#999\",\n      }}\n    >\n      {currentUrl}\n    </div>\n  );\n  const requestMethod = currentRequest.request?.method || \"GET\";\n  const contentType =\n    currentRequestHeader?.headers?.[\"content-type\"] ||\n    currentRequestHeader?.headers?.[\"Content-Type\"] ||\n    \"/null\";\n\n  return (\n    <>\n      <div\n        className=\"empty\"\n        style={{\n          display: history.length && currentRequest?.request !== undefined ? \"none\" : \"\",\n        }}\n      >\n        <Empty />\n      </div>\n      <div\n        className=\"right-container\"\n        style={{\n          display: history.length && currentRequest?.request !== undefined ? \"\" : \"none\",\n        }}\n      >\n        <div className=\"header-container\">\n          <Tabs\n            activeKey={activeKeyReq}\n            tabBarExtraContent={RequestTitle}\n            onChange={(value: any) => setActiveKeyReq(value)}\n          >\n            <TabPane\n              tab={\n                <>\n                  <Tag color=\"#108ee9\">{requestMethod}</Tag>请求头\n                </>\n              }\n              key=\"1\"\n            />\n            {requestMethod === \"POST\" && (\n              <TabPane\n                tab={\n                  <>\n                    <Tag color=\"#108ee9\">{contentType.split(\";\")[0].split(\"/\")[1]}</Tag>请求体\n                  </>\n                }\n                key=\"2\"\n              />\n            )}\n            {requestMethod === \"POST\" && (\n              <TabPane\n                tab={\n                  <>\n                    <Tag color=\"#108ee9\">TS</Tag>请求体\n                  </>\n                }\n                key=\"3\"\n              />\n            )}\n            <TabPane tab=\"Cookies\" key=\"4\" />\n          </Tabs>\n          {activeKeyReq === \"1\" ? (\n            <RequestHeader />\n          ) : activeKeyReq === \"2\" ? (\n            <RequestBody />\n          ) : activeKeyReq === \"3\" ? (\n            <RequestTs />\n          ) : (\n            <RequestCookie />\n          )}\n        </div>\n        <div className={cls(\"content-container\", { \"full-screen\": fullScreen })}>\n          <Tabs\n            activeKey={activeKey}\n            tabBarExtraContent={Title}\n            onChange={(value: any) => setActiveKey(value)}\n          >\n            <TabPane\n              tab={\n                <div>\n                  <Tag color=\"#2db7f5\">{codeMode}</Tag>\n                  返回体\n                </div>\n              }\n              key=\"1\"\n            ></TabPane>\n            {codeMode === \"json\" && (\n              <TabPane\n                tab={\n                  <>\n                    <Tag color=\"#108ee9\">TS</Tag>返回体\n                  </>\n                }\n                key=\"2\"\n              ></TabPane>\n            )}\n            <TabPane\n              tab={\n                <>\n                  <Tag color=\"#87d068\">header</Tag>返回头\n                </>\n              }\n              key=\"3\"\n            ></TabPane>\n          </Tabs>\n          {activeKey === \"1\" ? (\n            <ResponseBody />\n          ) : activeKey === \"2\" ? (\n            <ResponseTs></ResponseTs>\n          ) : (\n            <ResponseHeader />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default observer(RightArea);\n","/Users/lishengang/my/soft-mock-template/src/components/LeftArea/index.tsx",["78"],"import React, { useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Input, Menu, Modal } from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport GithubLogo from \"../../assets/github.svg\";\nimport Logo from \"../../assets/logo.jpg\";\nimport ClearLogo from \"../../assets/clear.svg\";\nimport ThemeLogo from \"../../assets/theme.svg\";\n\nimport store from \"../store\";\nimport \"./index.less\";\n\nconst { SubMenu } = Menu;\n\nfunction LeftArea() {\n  const {\n    history,\n    historyTitles,\n    index,\n    linkStatus,\n    linkText,\n    filterText,\n    filterHistory,\n    filterHistoryTitles,\n    getUpdates,\n    setCurrentRequest,\n    Delete,\n    clearAll,\n    setFilterText,\n    switchTheme,\n  } = store;\n  useEffect(() => {\n    /** 启动websockt */\n    getUpdates();\n  }, []);\n  const [showModal, setShowModal] = useState<boolean>(false);\n  const selectHandle = ({ key }: any) => {\n    setCurrentRequest(key);\n  };\n  const clearAllHandle = async () => {\n    /** 清除列表 */\n    await clearAll();\n    setShowModal(false);\n    store.history = [];\n  };\n  const deleteTitle = (e: any, title: string) => {\n    e.stopPropagation();\n    const historyTarget = history.filter((item) => item.request.host === title);\n    for (let his of historyTarget) {\n      const { scheme, host, path } = his.request;\n      const url = scheme + \"://\" + host + path.split(\"?\")[0];\n      Delete(url, his);\n    }\n  };\n  return (\n    <div className=\"left-container\">\n      <div className=\"logo\">\n        <img src={Logo} alt=\"logo\" />\n        <img src={ThemeLogo} className=\"setting\" alt=\"主题\" onClick={switchTheme} />\n        <img\n          className=\"clear-all\"\n          src={ClearLogo}\n          alt=\"清除所有\"\n          onClick={() => setShowModal(true)}\n        />\n        <div className={linkStatus ? \"link\" : \"no-link\"}>{linkText}</div>\n      </div>\n      <div className=\"input-filter\">\n        <Input\n          placeholder=\"过滤...\"\n          value={filterText}\n          onChange={(e) => {\n            setFilterText(e.target.value);\n          }}\n        ></Input>\n      </div>\n      <div className=\"wrap\"></div>\n      <div className=\"menu\">\n        <Menu\n          style={{ width: \"100%\" }}\n          defaultOpenKeys={historyTitles}\n          mode=\"inline\"\n          theme=\"dark\"\n          onSelect={selectHandle}\n          defaultSelectedKeys={[index]}\n        >\n          {filterHistoryTitles.map((title, index: number) => {\n            const thisHistory = filterHistory.filter((item) => item.request.host === title);\n            return (\n              <SubMenu\n                title={title + \"  \" + thisHistory.length}\n                key={title}\n                icon={<DeleteOutlined onClick={(e) => deleteTitle(e, title)} />}\n              >\n                {thisHistory.map((item, historyIndex: number) => (\n                  <Menu.Item key={index + \"-\" + historyIndex}>\n                    {item.request.path.split(\"?\")[0]}\n                  </Menu.Item>\n                ))}\n              </SubMenu>\n            );\n          })}\n        </Menu>\n      </div>\n      <div className=\"footer\">\n        <img src={GithubLogo} alt=\"github\" />\n        <a href=\"https://github.com/web-trump/soft-mock\">Soft-mock Github</a>\n      </div>\n      <Modal\n        title=\"你要清除列表吗\"\n        visible={showModal}\n        okText=\"清除\"\n        cancelText=\"取消\"\n        onCancel={() => setShowModal(false)}\n        onOk={clearAllHandle}\n      ></Modal>\n    </div>\n  );\n}\n\nexport default observer(LeftArea);\n","/Users/lishengang/my/soft-mock-template/src/api/index.ts",[],"/Users/lishengang/my/soft-mock-template/src/api/constant.ts",[],["79","80"],"/Users/lishengang/my/soft-mock-template/src/api/server.ts",[],"/Users/lishengang/my/soft-mock-template/src/components/store.ts",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestHeader/index.tsx",["81","82","83"],"import React, { useState, useEffect } from \"react\";\nimport { Table, Input, Button } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport jsBeautify from \"js-beautify\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/theme/eclipse.css\";\nimport store from \"../../../store\";\n\nimport \"./index.less\";\n\nfunction RequestHeader() {\n  const { currentRequestHeader, currentRequest, theme, updateCurrentRequest } = store;\n  const [value, setValue] = useState<string>(\"\");\n  useEffect(() => {\n    setValue(jsBeautify(JSON.stringify(currentRequestHeader.headers)));\n  }, [currentRequestHeader]);\n  const blurHandle = (instance: any) => {\n    const headersJson = {\n      ...JSON.parse(instance.getValue()),\n      Cookie: currentRequestHeader.cookies,\n    };\n    const headers = Object.keys(headersJson).reduce(\n      (pre: any, next) => [...pre, [next, headersJson[next]]],\n      []\n    );\n    if (currentRequest.request && currentRequest.request.headers) {\n      currentRequest.request.headers = headers;\n    }\n    updateCurrentRequest(currentRequest);\n  };\n  return (\n    <div className=\"header-req-container\">\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: \"javascript\",\n        }}\n        onBlur={blurHandle}\n      ></CodeMirror>\n    </div>\n  );\n}\n\nexport default observer(RequestHeader);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestCookie/index.tsx",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseBody/index.tsx",["84","85"],"import React, { useState, useEffect } from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { Input } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport jsBeautify from \"js-beautify\";\nimport { toJS } from \"mobx\";\nimport \"codemirror/keymap/sublime\";\n\nimport \"codemirror/addon/scroll/annotatescrollbar.js\";\nimport \"codemirror/addon/search/matchesonscrollbar.js\";\nimport \"codemirror/addon/search/match-highlighter.js\";\nimport \"codemirror/addon/search/jump-to-line.js\";\n\nimport \"codemirror/addon/dialog/dialog.js\";\nimport \"codemirror/addon/dialog/dialog.css\";\nimport \"codemirror/addon/search/searchcursor.js\";\nimport \"codemirror/addon/search/search.js\";\n\nimport store from \"../../../store\";\nimport \"./index.less\";\n\nconst TextArea = Input.TextArea;\n\nfunction ResponseBody() {\n  const { currentRequest, codeMode, theme, updateCurrentRequest } = store;\n  const { response } = currentRequest || {};\n  const [value, setValue] = useState<string>(\"\");\n\n  const blurHandle = (instance: any) => {\n    const value = instance.getValue();\n    const cR = toJS(store.currentRequest);\n    if (cR.response) {\n      cR.response.html = value;\n      /** 更新数据库的html */\n      updateCurrentRequest(cR);\n    }\n  };\n  useEffect(() => {\n    const text =\n      codeMode === \"javascript\" || codeMode === \"json\"\n        ? jsBeautify(response?.html || \"\")\n        : response?.html || \"\";\n    setValue(text);\n  }, [response?.html, response]);\n  return (\n    <div className=\"res-body-container\">\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: codeMode,\n        }}\n        onBlur={blurHandle}\n      />\n    </div>\n  );\n}\n\nexport default observer(ResponseBody);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseHeader/index.tsx",["86","87","88"],"import React, { useState, useEffect } from \"react\";\nimport { Table, Input, Button } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport jsBeautify from \"js-beautify\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/theme/eclipse.css\";\nimport store from \"../../../store\";\n\nimport \"./index.less\";\n\nfunction ResponseHeader() {\n  const [value, setValue] = useState<string>();\n  const { currentResponseHeader, currentRequest, theme, updateCurrentRequest } = store;\n  useEffect(() => {\n    setValue(jsBeautify(JSON.stringify(currentResponseHeader)));\n  }, [currentResponseHeader]);\n  const blurHandle = (instance: any) => {\n    const headersJson = JSON.parse(instance.getValue());\n    const headers = Object.keys(headersJson).reduce(\n      (pre: any, next) => [...pre, [next, headersJson[next]]],\n      []\n    );\n    if (currentRequest.response) {\n      currentRequest.response.headers = headers;\n    } else {\n      currentRequest.response = {\n        headers,\n      };\n    }\n\n    updateCurrentRequest(currentRequest);\n  };\n  return (\n    <div className=\"header-body-container\">\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: \"javascript\",\n        }}\n        // onInputRead={changeHandle}\n        onBlur={blurHandle}\n      />\n    </div>\n  );\n}\n\nexport default observer(ResponseHeader);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseTs/index.tsx",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestBody/index.tsx",["89","90"],"import React, { useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { Input } from \"antd\";\nimport jsBeautify from \"js-beautify\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/theme/eclipse.css\";\n\nimport store from \"../../../store\";\nimport \"./index.less\";\n\nfunction parseParams(params: string) {\n  return params.split(\"&\").reduce((pre: any, next) => {\n    const item = next.split(\"=\");\n    pre[item[0]] = item[1];\n    return pre;\n  }, {});\n}\n\nfunction RequestBody() {\n  const { currentRequestBody, theme } = store;\n  const [value, setValue] = useState<string>(\"\");\n  useEffect(() => {\n    setValue(jsBeautify(currentRequestBody));\n  }, [currentRequestBody]);\n  const blurHandle = () => {};\n  return (\n    <div className=\"body-req-container\">\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: \"javascript\",\n        }}\n        onBlur={blurHandle}\n      />\n    </div>\n  );\n}\n\nexport default observer(RequestBody);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestTs/index.tsx",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":15},{"ruleId":"95","severity":1,"message":"99","line":3,"column":39,"nodeType":"97","messageId":"98","endLine":3,"endColumn":44},{"ruleId":"100","severity":1,"message":"101","line":35,"column":6,"nodeType":"102","endLine":35,"endColumn":8,"suggestions":"103"},{"ruleId":"91","replacedBy":"104"},{"ruleId":"93","replacedBy":"105"},{"ruleId":"95","severity":1,"message":"96","line":2,"column":10,"nodeType":"97","messageId":"98","endLine":2,"endColumn":15},{"ruleId":"95","severity":1,"message":"99","line":2,"column":17,"nodeType":"97","messageId":"98","endLine":2,"endColumn":22},{"ruleId":"95","severity":1,"message":"106","line":2,"column":24,"nodeType":"97","messageId":"98","endLine":2,"endColumn":30},{"ruleId":"95","severity":1,"message":"107","line":22,"column":7,"nodeType":"97","messageId":"98","endLine":22,"endColumn":15},{"ruleId":"100","severity":1,"message":"108","line":44,"column":6,"nodeType":"102","endLine":44,"endColumn":32,"suggestions":"109"},{"ruleId":"95","severity":1,"message":"96","line":2,"column":10,"nodeType":"97","messageId":"98","endLine":2,"endColumn":15},{"ruleId":"95","severity":1,"message":"99","line":2,"column":17,"nodeType":"97","messageId":"98","endLine":2,"endColumn":22},{"ruleId":"95","severity":1,"message":"106","line":2,"column":24,"nodeType":"97","messageId":"98","endLine":2,"endColumn":30},{"ruleId":"95","severity":1,"message":"99","line":4,"column":10,"nodeType":"97","messageId":"98","endLine":4,"endColumn":15},{"ruleId":"95","severity":1,"message":"110","line":12,"column":10,"nodeType":"97","messageId":"98","endLine":12,"endColumn":21},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"@typescript-eslint/no-unused-vars","'Table' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUpdates'. Either include it or remove the dependency array.","ArrayExpression",["113"],["111"],["112"],"'Button' is defined but never used.","'TextArea' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'codeMode'. Either include it or remove the dependency array.",["114"],"'parseParams' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},"Update the dependencies array to be: [getUpdates]",{"range":"119","text":"120"},"Update the dependencies array to be: [response?.html, response, codeMode]",{"range":"121","text":"122"},[800,802],"[getUpdates]",[1403,1429],"[response?.html, response, codeMode]"]