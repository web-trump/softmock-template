[{"/Users/lishengang/my/soft-mock-template/src/index.tsx":"1","/Users/lishengang/my/soft-mock-template/src/reportWebVitals.ts":"2","/Users/lishengang/my/soft-mock-template/src/App.tsx":"3","/Users/lishengang/my/soft-mock-template/src/components/RightArea/index.tsx":"4","/Users/lishengang/my/soft-mock-template/src/components/LeftArea/index.tsx":"5","/Users/lishengang/my/soft-mock-template/src/api/index.ts":"6","/Users/lishengang/my/soft-mock-template/src/api/constant.ts":"7","/Users/lishengang/my/soft-mock-template/src/api/server.ts":"8","/Users/lishengang/my/soft-mock-template/src/components/store.ts":"9","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestHeader/index.tsx":"10","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestCookie/index.tsx":"11","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseBody/index.tsx":"12","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseHeader/index.tsx":"13","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseTs/index.tsx":"14","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestBody/index.tsx":"15","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestTs/index.tsx":"16","/Users/lishengang/my/soft-mock-template/src/utils/index.ts":"17","/Users/lishengang/my/soft-mock-template/src/utils/uuid.ts":"18","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestSetting/index.tsx":"19"},{"size":449,"mtime":1611401949815,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1609753455358,"results":"22","hashOfConfig":"21"},{"size":295,"mtime":1611399151641,"results":"23","hashOfConfig":"21"},{"size":6901,"mtime":1612255975789,"results":"24","hashOfConfig":"21"},{"size":5848,"mtime":1612256822104,"results":"25","hashOfConfig":"21"},{"size":986,"mtime":1612167777736,"results":"26","hashOfConfig":"21"},{"size":180,"mtime":1612169735937,"results":"27","hashOfConfig":"21"},{"size":324,"mtime":1609998730863,"results":"28","hashOfConfig":"21"},{"size":9170,"mtime":1612256710393,"results":"29","hashOfConfig":"21"},{"size":1414,"mtime":1612073674014,"results":"30","hashOfConfig":"21"},{"size":1815,"mtime":1612073685182,"results":"31","hashOfConfig":"21"},{"size":2810,"mtime":1612246365678,"results":"32","hashOfConfig":"21"},{"size":1416,"mtime":1612073631360,"results":"33","hashOfConfig":"21"},{"size":1940,"mtime":1612234032725,"results":"34","hashOfConfig":"21"},{"size":1069,"mtime":1612241216259,"results":"35","hashOfConfig":"21"},{"size":937,"mtime":1612073665075,"results":"36","hashOfConfig":"21"},{"size":42,"mtime":1612142994038,"results":"37","hashOfConfig":"21"},{"size":237,"mtime":1612142941324,"results":"38","hashOfConfig":"21"},{"size":2135,"mtime":1612258950570,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"12xmujw",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lishengang/my/soft-mock-template/src/index.tsx",[],["84","85"],"/Users/lishengang/my/soft-mock-template/src/reportWebVitals.ts",[],"/Users/lishengang/my/soft-mock-template/src/App.tsx",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/index.tsx",["86","87"],"/Users/lishengang/my/soft-mock-template/src/components/LeftArea/index.tsx",["88","89","90"],"/Users/lishengang/my/soft-mock-template/src/api/index.ts",[],"/Users/lishengang/my/soft-mock-template/src/api/constant.ts",[],"/Users/lishengang/my/soft-mock-template/src/api/server.ts",[],"/Users/lishengang/my/soft-mock-template/src/components/store.ts",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestHeader/index.tsx",["91","92","93"],"import React, { useState, useEffect } from \"react\";\nimport { Table, Input, Button } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport jsBeautify from \"js-beautify\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/theme/eclipse.css\";\nimport store from \"../../../store\";\n\nimport \"./index.less\";\n\nfunction RequestHeader() {\n  const { currentRequestHeader, currentRequest, theme, updateCurrentRequest } = store;\n  const [value, setValue] = useState<string>(\"\");\n  useEffect(() => {\n    setValue(jsBeautify(JSON.stringify(currentRequestHeader.headers)));\n  }, [currentRequestHeader]);\n  const blurHandle = (instance: any) => {\n    const headersJson = {\n      ...JSON.parse(instance.getValue()),\n      Cookie: currentRequestHeader.cookies,\n    };\n    const headers = Object.keys(headersJson).reduce(\n      (pre: any, next) => [...pre, [next, headersJson[next]]],\n      []\n    );\n    if (currentRequest.request && currentRequest.request.headers) {\n      currentRequest.request.headers = headers;\n    }\n    updateCurrentRequest(currentRequest);\n  };\n  return (\n    <div className=\"header-req-container\">\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: \"javascript\",\n        }}\n        onBlur={blurHandle}\n      ></CodeMirror>\n    </div>\n  );\n}\n\nexport default observer(RequestHeader);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestCookie/index.tsx",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseBody/index.tsx",["94","95"],"import React, { useState, useEffect } from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { observer } from \"mobx-react\";\nimport jsBeautify from \"js-beautify\";\nimport { Button, Upload } from \"antd\";\nimport { toJS } from \"mobx\";\nimport \"codemirror/keymap/sublime\";\n\nimport \"codemirror/addon/scroll/annotatescrollbar.js\";\nimport \"codemirror/addon/search/matchesonscrollbar.js\";\nimport \"codemirror/addon/search/match-highlighter.js\";\nimport \"codemirror/addon/search/jump-to-line.js\";\n\nimport \"codemirror/addon/dialog/dialog.js\";\nimport \"codemirror/addon/dialog/dialog.css\";\nimport \"codemirror/addon/search/searchcursor.js\";\nimport \"codemirror/addon/search/search.js\";\n\nimport store from \"../../../store\";\nimport \"./index.less\";\n\nfunction ResponseBody() {\n  const {\n    currentRequest,\n    codeMode,\n    theme,\n    currentResponseHeader,\n    index: menuKey,\n    updateCurrentRequest,\n  } = store;\n  const { response } = currentRequest || {};\n  const [value, setValue] = useState<string>(\"\");\n\n  const blurHandle = (instance: any) => {\n    const value = instance.getValue();\n    const cR = toJS(store.currentRequest);\n    if (cR.response) {\n      cR.response.html = value;\n      /** 更新数据库的html */\n      updateCurrentRequest(cR);\n    }\n  };\n  const uploadHandle = (file: any) => {\n    const r = new FileReader();\n    r.onload = function () {\n      const base64 = (r.result as string).split(\"base64,\")[1];\n      const cR = toJS(store.currentRequest);\n      if (cR.response) {\n        cR.response.html = base64;\n        /** 更新数据库的html */\n        updateCurrentRequest(cR);\n      }\n    };\n    r.readAsDataURL(file);\n    return false;\n  };\n  const contentType =\n    currentResponseHeader[\"content-type\"] || currentResponseHeader[\"Content-Type\"] || \"\";\n  const isImage = contentType.includes(\"image\");\n  const isVideo = contentType.includes(\"video\");\n  useEffect(() => {\n    const text =\n      codeMode === \"javascript\" || codeMode === \"json\"\n        ? jsBeautify(response?.html || \"\")\n        : response?.html || \"\";\n    setValue(text);\n  }, [response?.html, response]);\n  return isImage ? (\n    <div className=\"img-container\">\n      <div className=\"img-con\">\n        <img src={\"data:\" + contentType + \";base64,\" + value} alt=\"img\" />\n      </div>\n      <Upload showUploadList={false} accept=\".png,.gif,.jpg,.jpeg\" beforeUpload={uploadHandle}>\n        <Button>替换图片</Button>\n      </Upload>\n    </div>\n  ) : isVideo ? (\n    <video src={atob(value)}></video>\n  ) : (\n    <div className=\"res-body-container\" key={contentType.toString()}>\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: codeMode,\n        }}\n        onBlur={blurHandle}\n      />\n    </div>\n  );\n}\n\nexport default observer(ResponseBody);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseHeader/index.tsx",["96","97","98"],"import React, { useState, useEffect } from \"react\";\nimport { Table, Input, Button } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport jsBeautify from \"js-beautify\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/theme/eclipse.css\";\nimport store from \"../../../store\";\n\nimport \"./index.less\";\n\nfunction ResponseHeader() {\n  const [value, setValue] = useState<string>();\n  const { currentResponseHeader, currentRequest, theme, updateCurrentRequest } = store;\n  useEffect(() => {\n    setValue(jsBeautify(JSON.stringify(currentResponseHeader)));\n  }, [currentResponseHeader]);\n  const blurHandle = (instance: any) => {\n    const headersJson = JSON.parse(instance.getValue());\n    const headers = Object.keys(headersJson).reduce(\n      (pre: any, next) => [...pre, [next, headersJson[next]]],\n      []\n    );\n    if (currentRequest.response) {\n      currentRequest.response.headers = headers;\n    } else {\n      currentRequest.response = {\n        headers,\n      };\n    }\n\n    updateCurrentRequest(currentRequest);\n  };\n  return (\n    <div className=\"header-body-container\">\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: \"javascript\",\n        }}\n        // onInputRead={changeHandle}\n        onBlur={blurHandle}\n      />\n    </div>\n  );\n}\n\nexport default observer(ResponseHeader);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseTs/index.tsx",["99","100","101"],"import React, { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { toJS } from \"mobx\";\nimport { message } from \"antd\";\nimport jsBeautify from \"js-beautify\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport JsonToJS from \"json-to-ts\";\nimport { mock as intermock } from \"intermock\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/theme/eclipse.css\";\n\nimport store from \"../../../store\";\nimport \"./index.less\";\n\nfunction ResponseTs() {\n  const { currentRequest, theme, lastMockDate, updateCurrentRequest } = store;\n  const [value, setValue] = useState<string>(\"\");\n  const tsChangeHandle = (instance: any) => {\n    const value = instance.getValue();\n    setValue(jsBeautify(value));\n  };\n  useEffect(() => {\n    if (value) return;\n    const text = currentRequest?.response?.html || \"\";\n    let result = \"\";\n    const tsCon: any[] = [];\n    JsonToJS(JSON.parse(text)).forEach((typeInterface) => {\n      tsCon.push(typeInterface);\n      result += typeInterface + \"\\n\";\n    });\n    setValue(result);\n  }, [currentRequest]);\n  useEffect(() => {\n    console.log(\"mock data\");\n    if (!value) return;\n\n    const mock = intermock({\n      files: [[\"test\", value]],\n      output: \"json\",\n    });\n    const newData = JSON.stringify(JSON.parse(mock as string).RootObject);\n    const cR = toJS(store.currentRequest);\n    if (!cR.response) {\n      cR.response = {};\n    }\n    cR.response.html = newData;\n    /** 更新数据库的html */\n    updateCurrentRequest(cR).then(() => {\n      message.success(\"已按照typescript mock了数据\");\n    });\n  }, [lastMockDate.getTime()]);\n  return (\n    <div className=\"ts-body-container\">\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: \"typescript\",\n        }}\n        onBlur={tsChangeHandle}\n        // onChange={changeHandle}\n      />\n    </div>\n  );\n}\n\nexport default observer(ResponseTs);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestBody/index.tsx",["102","103"],"import React, { useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { Input } from \"antd\";\nimport jsBeautify from \"js-beautify\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/theme/eclipse.css\";\n\nimport store from \"../../../store\";\nimport \"./index.less\";\n\nfunction parseParams(params: string) {\n  return params.split(\"&\").reduce((pre: any, next) => {\n    const item = next.split(\"=\");\n    pre[item[0]] = item[1];\n    return pre;\n  }, {});\n}\n\nfunction RequestBody() {\n  const { currentRequestBody, theme } = store;\n  const [value, setValue] = useState<string>(\"\");\n  useEffect(() => {\n    setValue(jsBeautify(currentRequestBody));\n  }, [currentRequestBody]);\n  const blurHandle = () => {};\n\n  return (\n    <div className=\"body-req-container\">\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: \"javascript\",\n        }}\n        onBlur={blurHandle}\n      />\n    </div>\n  );\n}\n\nexport default observer(RequestBody);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestTs/index.tsx",[],"/Users/lishengang/my/soft-mock-template/src/utils/index.ts",[],"/Users/lishengang/my/soft-mock-template/src/utils/uuid.ts",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestSetting/index.tsx",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":3,"column":10,"nodeType":"110","messageId":"111","endLine":3,"endColumn":15},{"ruleId":"108","severity":1,"message":"112","line":3,"column":39,"nodeType":"110","messageId":"111","endLine":3,"endColumn":44},{"ruleId":"108","severity":1,"message":"113","line":3,"column":39,"nodeType":"110","messageId":"111","endLine":3,"endColumn":45},{"ruleId":"108","severity":1,"message":"114","line":13,"column":10,"nodeType":"110","messageId":"111","endLine":13,"endColumn":19},{"ruleId":"115","severity":1,"message":"116","line":38,"column":6,"nodeType":"117","endLine":38,"endColumn":8,"suggestions":"118"},{"ruleId":"108","severity":1,"message":"109","line":2,"column":10,"nodeType":"110","messageId":"111","endLine":2,"endColumn":15},{"ruleId":"108","severity":1,"message":"112","line":2,"column":17,"nodeType":"110","messageId":"111","endLine":2,"endColumn":22},{"ruleId":"108","severity":1,"message":"119","line":2,"column":24,"nodeType":"110","messageId":"111","endLine":2,"endColumn":30},{"ruleId":"108","severity":1,"message":"120","line":28,"column":12,"nodeType":"110","messageId":"111","endLine":28,"endColumn":19},{"ruleId":"115","severity":1,"message":"121","line":67,"column":6,"nodeType":"117","endLine":67,"endColumn":32,"suggestions":"122"},{"ruleId":"108","severity":1,"message":"109","line":2,"column":10,"nodeType":"110","messageId":"111","endLine":2,"endColumn":15},{"ruleId":"108","severity":1,"message":"112","line":2,"column":17,"nodeType":"110","messageId":"111","endLine":2,"endColumn":22},{"ruleId":"108","severity":1,"message":"119","line":2,"column":24,"nodeType":"110","messageId":"111","endLine":2,"endColumn":30},{"ruleId":"115","severity":1,"message":"123","line":32,"column":6,"nodeType":"117","endLine":32,"endColumn":22,"suggestions":"124"},{"ruleId":"115","severity":1,"message":"125","line":51,"column":6,"nodeType":"117","endLine":51,"endColumn":30,"suggestions":"126"},{"ruleId":"115","severity":1,"message":"127","line":51,"column":7,"nodeType":"128","endLine":51,"endColumn":29},{"ruleId":"108","severity":1,"message":"112","line":4,"column":10,"nodeType":"110","messageId":"111","endLine":4,"endColumn":15},{"ruleId":"108","severity":1,"message":"129","line":12,"column":10,"nodeType":"110","messageId":"111","endLine":12,"endColumn":21},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"@typescript-eslint/no-unused-vars","'Table' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","'Select' is defined but never used.","'exception' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUpdates'. Either include it or remove the dependency array.","ArrayExpression",["132"],"'Button' is defined but never used.","'menuKey' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'codeMode'. Either include it or remove the dependency array.",["133"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["134"],"React Hook useEffect has missing dependencies: 'updateCurrentRequest' and 'value'. Either include them or remove the dependency array.",["135"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'parseParams' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [getUpdates]",{"range":"144","text":"145"},"Update the dependencies array to be: [response?.html, response, codeMode]",{"range":"146","text":"147"},"Update the dependencies array to be: [currentRequest, value]",{"range":"148","text":"149"},"Update the dependencies array to be: [updateCurrentRequest, value]",{"range":"150","text":"151"},[937,939],"[getUpdates]",[2048,2074],"[response?.html, response, codeMode]",[1046,1062],"[currentRequest, value]",[1560,1584],"[updateCurrentRequest, value]"]