[{"/Users/lishengang/my/soft-mock-template/src/index.tsx":"1","/Users/lishengang/my/soft-mock-template/src/reportWebVitals.ts":"2","/Users/lishengang/my/soft-mock-template/src/App.tsx":"3","/Users/lishengang/my/soft-mock-template/src/components/RightArea/index.tsx":"4","/Users/lishengang/my/soft-mock-template/src/components/LeftArea/index.tsx":"5","/Users/lishengang/my/soft-mock-template/src/api/index.ts":"6","/Users/lishengang/my/soft-mock-template/src/api/constant.ts":"7","/Users/lishengang/my/soft-mock-template/src/api/server.ts":"8","/Users/lishengang/my/soft-mock-template/src/components/store.ts":"9","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestHeader/index.tsx":"10","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestCookie/index.tsx":"11","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseBody/index.tsx":"12","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseHeader/index.tsx":"13","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseTs/index.tsx":"14","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestBody/index.tsx":"15","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestTs/index.tsx":"16","/Users/lishengang/my/soft-mock-template/src/utils/index.ts":"17","/Users/lishengang/my/soft-mock-template/src/utils/uuid.ts":"18","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestSetting/index.tsx":"19"},{"size":449,"mtime":1611401949815,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1609753455358,"results":"22","hashOfConfig":"21"},{"size":295,"mtime":1611399151641,"results":"23","hashOfConfig":"21"},{"size":6901,"mtime":1612452540823,"results":"24","hashOfConfig":"21"},{"size":6702,"mtime":1612498103781,"results":"25","hashOfConfig":"21"},{"size":994,"mtime":1612493575129,"results":"26","hashOfConfig":"21"},{"size":180,"mtime":1612169735937,"results":"27","hashOfConfig":"21"},{"size":324,"mtime":1609998730863,"results":"28","hashOfConfig":"21"},{"size":10250,"mtime":1612503073760,"results":"29","hashOfConfig":"21"},{"size":1414,"mtime":1612073674014,"results":"30","hashOfConfig":"21"},{"size":1815,"mtime":1612073685182,"results":"31","hashOfConfig":"21"},{"size":2810,"mtime":1612246365678,"results":"32","hashOfConfig":"21"},{"size":1416,"mtime":1612073631360,"results":"33","hashOfConfig":"21"},{"size":1940,"mtime":1612234032725,"results":"34","hashOfConfig":"21"},{"size":963,"mtime":1612452007032,"results":"35","hashOfConfig":"21"},{"size":937,"mtime":1612073665075,"results":"36","hashOfConfig":"21"},{"size":42,"mtime":1612142994038,"results":"37","hashOfConfig":"21"},{"size":237,"mtime":1612142941324,"results":"38","hashOfConfig":"21"},{"size":2974,"mtime":1612498030696,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"12xmujw",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lishengang/my/soft-mock-template/src/index.tsx",[],["84","85"],"/Users/lishengang/my/soft-mock-template/src/reportWebVitals.ts",[],"/Users/lishengang/my/soft-mock-template/src/App.tsx",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/index.tsx",["86","87"],"import { observer } from \"mobx-react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Table, Switch, Button, Tabs, Input, Tag, notification, Empty, message } from \"antd\";\nimport cls from \"classnames\";\n\nimport store from \"../store\";\nimport RequestHeader from \"./components/RequestHeader\";\nimport RequestCookie from \"./components/RequestCookie\";\nimport RequestBody from \"./components/RequestBody\";\nimport RequestTs from \"./components/RequestTs\";\nimport RequestSetting from \"./components/RequestSetting\";\nimport ResponseHeader from \"./components/ResponseHeader\";\nimport ResponseBody from \"./components/ResponseBody\";\nimport ResponseTs from \"./components/ResponseTs\";\nimport \"./index.less\";\n\nconst { TabPane } = Tabs;\n\nfunction RightArea() {\n  const {\n    currentRequest,\n    codeMode,\n    currentRequestHeader,\n    currentUrl,\n    history,\n    updateCurrentRequest,\n    Delete,\n    replayRequest,\n    updateLastMockDate,\n  } = store;\n  const [isListen, setIsListen] = useState<boolean>(false);\n  const [fullScreen, setFullScreen] = useState<boolean>(false);\n  const [activeKey, setActiveKey] = useState<\"1\" | \"2\" | \"3\">(\"1\");\n  const [activeKeyReq, setActiveKeyReq] = useState<\"1\" | \"2\" | \"3\" | \"4\">(\"1\");\n  const mockHandle = () => {\n    updateLastMockDate();\n    Promise.resolve(void 0).then(() => {\n      setActiveKey(\"1\");\n    });\n  };\n  const showNotification = async () => {\n    await Delete();\n    notification.info({\n      message: \"删除成功\",\n      description: currentUrl,\n    });\n  };\n  const changeListen = async (value: boolean) => {\n    currentRequest.status = value ? \"1\" : \"0\";\n    setIsListen(value);\n    updateCurrentRequest({ ...currentRequest });\n  };\n  const replayHandle = async () => {\n    await replayRequest();\n    message.success(\"replay完成\");\n  };\n  useEffect(() => {\n    setIsListen(+currentRequest?.status === 1);\n  }, [currentRequest]);\n  const Title = (\n    <div className=\"title\">\n      {fullScreen && <div className=\"current-url\">{currentUrl}</div>}\n      <Switch\n        checkedChildren=\"监听\"\n        unCheckedChildren=\"关闭\"\n        checked={isListen}\n        onClick={changeListen}\n      />\n      <div\n        style={{\n          width: \"8px\",\n        }}\n      ></div>\n      {activeKey === \"2\" && (\n        <Button className=\"full-screen-btn\" shape=\"round\" size=\"small\" danger onClick={mockHandle}>\n          Mock data\n        </Button>\n      )}\n      {fullScreen ? (\n        <Button\n          className=\"full-screen-btn\"\n          shape=\"round\"\n          size=\"small\"\n          onClick={() => setFullScreen(false)}\n        >\n          关闭全屏\n        </Button>\n      ) : (\n        <Button\n          className=\"full-screen-btn\"\n          shape=\"round\"\n          size=\"small\"\n          onClick={() => setFullScreen(true)}\n        >\n          全屏\n        </Button>\n      )}\n\n      <Button type=\"primary\" danger shape=\"round\" size=\"small\" onClick={showNotification}>\n        删除\n      </Button>\n    </div>\n  );\n  const RequestTitle = (\n    <div className=\"request-tools\">\n      <div\n        style={{\n          color: \"#999\",\n        }}\n      >\n        {currentUrl}\n      </div>\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        size=\"small\"\n        className=\"replay-btn\"\n        onClick={replayHandle}\n      >\n        重播\n      </Button>\n    </div>\n  );\n  const requestMethod = currentRequest?.request?.method || \"GET\";\n  const contentType =\n    currentRequestHeader?.headers?.[\"content-type\"] ||\n    currentRequestHeader?.headers?.[\"Content-Type\"] ||\n    \"/null\";\n  /** 有些选项某些请求不存在，例如get请求不存在请求体，那么重置key */\n  if (requestMethod !== \"POST\" && (activeKeyReq === \"2\" || activeKeyReq === \"3\")) {\n    setActiveKeyReq(\"1\");\n  }\n  if (codeMode !== \"json\" && activeKey === \"2\") {\n    setActiveKey(\"1\");\n  }\n  return (\n    <>\n      <div\n        className=\"empty\"\n        style={{\n          display: history.length && currentRequest?.request !== undefined ? \"none\" : \"\",\n        }}\n      >\n        <Empty />\n      </div>\n      <div\n        className=\"right-container\"\n        style={{\n          display: history.length && currentRequest?.request !== undefined ? \"\" : \"none\",\n        }}\n      >\n        <div className=\"header-container\">\n          <Tabs\n            activeKey={activeKeyReq}\n            tabBarExtraContent={RequestTitle}\n            onChange={(value: any) => setActiveKeyReq(value)}\n          >\n            <TabPane\n              tab={\n                <>\n                  <Tag color=\"#108ee9\">{requestMethod}</Tag>请求头\n                </>\n              }\n              key=\"1\"\n            />\n            {requestMethod === \"POST\" && (\n              <TabPane\n                tab={\n                  <>\n                    <Tag color=\"#108ee9\">{contentType.split(\";\")[0].split(\"/\")[1]}</Tag>请求体\n                  </>\n                }\n                key=\"2\"\n              />\n            )}\n            {requestMethod === \"POST\" && (\n              <TabPane\n                tab={\n                  <>\n                    <Tag color=\"#108ee9\">TS</Tag>请求体\n                  </>\n                }\n                key=\"3\"\n              />\n            )}\n            <TabPane tab=\"Cookies\" key=\"4\" />\n            <TabPane tab=\"设置\" key=\"5\" />\n          </Tabs>\n          {activeKeyReq === \"1\" ? (\n            <RequestHeader />\n          ) : activeKeyReq === \"2\" ? (\n            <RequestBody />\n          ) : activeKeyReq === \"3\" ? (\n            <RequestTs />\n          ) : activeKeyReq === \"4\" ? (\n            <RequestCookie />\n          ) : (\n            <RequestSetting />\n          )}\n        </div>\n        <div className={cls(\"content-container\", { \"full-screen\": fullScreen })}>\n          <Tabs\n            activeKey={activeKey}\n            tabBarExtraContent={Title}\n            onChange={(value: any) => setActiveKey(value)}\n          >\n            <TabPane\n              tab={\n                <div>\n                  <Tag color=\"#2db7f5\">{codeMode}</Tag>\n                  返回体\n                </div>\n              }\n              key=\"1\"\n            ></TabPane>\n            {codeMode === \"json\" && (\n              <TabPane\n                tab={\n                  <>\n                    <Tag color=\"#108ee9\">TS</Tag>返回体\n                  </>\n                }\n                key=\"2\"\n              ></TabPane>\n            )}\n            <TabPane\n              tab={\n                <>\n                  <Tag color=\"#87d068\">header</Tag>返回头\n                </>\n              }\n              key=\"3\"\n            ></TabPane>\n          </Tabs>\n          {activeKey === \"1\" ? (\n            <ResponseBody />\n          ) : activeKey === \"2\" ? (\n            <ResponseTs></ResponseTs>\n          ) : (\n            <ResponseHeader />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default observer(RightArea);\n","/Users/lishengang/my/soft-mock-template/src/components/LeftArea/index.tsx",["88"],"/Users/lishengang/my/soft-mock-template/src/api/index.ts",[],"/Users/lishengang/my/soft-mock-template/src/api/constant.ts",[],"/Users/lishengang/my/soft-mock-template/src/api/server.ts",[],"/Users/lishengang/my/soft-mock-template/src/components/store.ts",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestHeader/index.tsx",["89","90","91"],"import React, { useState, useEffect } from \"react\";\nimport { Table, Input, Button } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport jsBeautify from \"js-beautify\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/theme/eclipse.css\";\nimport store from \"../../../store\";\n\nimport \"./index.less\";\n\nfunction RequestHeader() {\n  const { currentRequestHeader, currentRequest, theme, updateCurrentRequest } = store;\n  const [value, setValue] = useState<string>(\"\");\n  useEffect(() => {\n    setValue(jsBeautify(JSON.stringify(currentRequestHeader.headers)));\n  }, [currentRequestHeader]);\n  const blurHandle = (instance: any) => {\n    const headersJson = {\n      ...JSON.parse(instance.getValue()),\n      Cookie: currentRequestHeader.cookies,\n    };\n    const headers = Object.keys(headersJson).reduce(\n      (pre: any, next) => [...pre, [next, headersJson[next]]],\n      []\n    );\n    if (currentRequest.request && currentRequest.request.headers) {\n      currentRequest.request.headers = headers;\n    }\n    updateCurrentRequest(currentRequest);\n  };\n  return (\n    <div className=\"header-req-container\">\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: \"javascript\",\n        }}\n        onBlur={blurHandle}\n      ></CodeMirror>\n    </div>\n  );\n}\n\nexport default observer(RequestHeader);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestCookie/index.tsx",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseBody/index.tsx",["92","93"],"import React, { useState, useEffect } from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { observer } from \"mobx-react\";\nimport jsBeautify from \"js-beautify\";\nimport { Button, Upload } from \"antd\";\nimport { toJS } from \"mobx\";\nimport \"codemirror/keymap/sublime\";\n\nimport \"codemirror/addon/scroll/annotatescrollbar.js\";\nimport \"codemirror/addon/search/matchesonscrollbar.js\";\nimport \"codemirror/addon/search/match-highlighter.js\";\nimport \"codemirror/addon/search/jump-to-line.js\";\n\nimport \"codemirror/addon/dialog/dialog.js\";\nimport \"codemirror/addon/dialog/dialog.css\";\nimport \"codemirror/addon/search/searchcursor.js\";\nimport \"codemirror/addon/search/search.js\";\n\nimport store from \"../../../store\";\nimport \"./index.less\";\n\nfunction ResponseBody() {\n  const {\n    currentRequest,\n    codeMode,\n    theme,\n    currentResponseHeader,\n    index: menuKey,\n    updateCurrentRequest,\n  } = store;\n  const { response } = currentRequest || {};\n  const [value, setValue] = useState<string>(\"\");\n\n  const blurHandle = (instance: any) => {\n    const value = instance.getValue();\n    const cR = toJS(store.currentRequest);\n    if (cR.response) {\n      cR.response.html = value;\n      /** 更新数据库的html */\n      updateCurrentRequest(cR);\n    }\n  };\n  const uploadHandle = (file: any) => {\n    const r = new FileReader();\n    r.onload = function () {\n      const base64 = (r.result as string).split(\"base64,\")[1];\n      const cR = toJS(store.currentRequest);\n      if (cR.response) {\n        cR.response.html = base64;\n        /** 更新数据库的html */\n        updateCurrentRequest(cR);\n      }\n    };\n    r.readAsDataURL(file);\n    return false;\n  };\n  const contentType =\n    currentResponseHeader[\"content-type\"] || currentResponseHeader[\"Content-Type\"] || \"\";\n  const isImage = contentType.includes(\"image\");\n  const isVideo = contentType.includes(\"video\");\n  useEffect(() => {\n    const text =\n      codeMode === \"javascript\" || codeMode === \"json\"\n        ? jsBeautify(response?.html || \"\")\n        : response?.html || \"\";\n    setValue(text);\n  }, [response?.html, response]);\n  return isImage ? (\n    <div className=\"img-container\">\n      <div className=\"img-con\">\n        <img src={\"data:\" + contentType + \";base64,\" + value} alt=\"img\" />\n      </div>\n      <Upload showUploadList={false} accept=\".png,.gif,.jpg,.jpeg\" beforeUpload={uploadHandle}>\n        <Button>替换图片</Button>\n      </Upload>\n    </div>\n  ) : isVideo ? (\n    <video src={atob(value)}></video>\n  ) : (\n    <div className=\"res-body-container\" key={contentType.toString()}>\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: codeMode,\n        }}\n        onBlur={blurHandle}\n      />\n    </div>\n  );\n}\n\nexport default observer(ResponseBody);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseHeader/index.tsx",["94","95","96"],"import React, { useState, useEffect } from \"react\";\nimport { Table, Input, Button } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport jsBeautify from \"js-beautify\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/theme/eclipse.css\";\nimport store from \"../../../store\";\n\nimport \"./index.less\";\n\nfunction ResponseHeader() {\n  const [value, setValue] = useState<string>();\n  const { currentResponseHeader, currentRequest, theme, updateCurrentRequest } = store;\n  useEffect(() => {\n    setValue(jsBeautify(JSON.stringify(currentResponseHeader)));\n  }, [currentResponseHeader]);\n  const blurHandle = (instance: any) => {\n    const headersJson = JSON.parse(instance.getValue());\n    const headers = Object.keys(headersJson).reduce(\n      (pre: any, next) => [...pre, [next, headersJson[next]]],\n      []\n    );\n    if (currentRequest.response) {\n      currentRequest.response.headers = headers;\n    } else {\n      currentRequest.response = {\n        headers,\n      };\n    }\n\n    updateCurrentRequest(currentRequest);\n  };\n  return (\n    <div className=\"header-body-container\">\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: \"javascript\",\n        }}\n        // onInputRead={changeHandle}\n        onBlur={blurHandle}\n      />\n    </div>\n  );\n}\n\nexport default observer(ResponseHeader);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/ResponseTs/index.tsx",["97","98","99"],"import React, { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { toJS } from \"mobx\";\nimport { message } from \"antd\";\nimport jsBeautify from \"js-beautify\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport JsonToJS from \"json-to-ts\";\nimport { mock as intermock } from \"intermock\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/theme/eclipse.css\";\n\nimport store from \"../../../store\";\nimport \"./index.less\";\n\nfunction ResponseTs() {\n  const { currentRequest, theme, lastMockDate, updateCurrentRequest } = store;\n  const [value, setValue] = useState<string>(\"\");\n  const tsChangeHandle = (instance: any) => {\n    const value = instance.getValue();\n    setValue(jsBeautify(value));\n  };\n  useEffect(() => {\n    if (value) return;\n    const text = currentRequest?.response?.html || \"\";\n    let result = \"\";\n    const tsCon: any[] = [];\n    JsonToJS(JSON.parse(text)).forEach((typeInterface) => {\n      tsCon.push(typeInterface);\n      result += typeInterface + \"\\n\";\n    });\n    setValue(result);\n  }, [currentRequest]);\n  useEffect(() => {\n    console.log(\"mock data\");\n    if (!value) return;\n\n    const mock = intermock({\n      files: [[\"test\", value]],\n      output: \"json\",\n    });\n    const newData = JSON.stringify(JSON.parse(mock as string).RootObject);\n    const cR = toJS(store.currentRequest);\n    if (!cR.response) {\n      cR.response = {};\n    }\n    cR.response.html = newData;\n    /** 更新数据库的html */\n    updateCurrentRequest(cR).then(() => {\n      message.success(\"已按照typescript mock了数据\");\n    });\n  }, [lastMockDate.getTime()]);\n  return (\n    <div className=\"ts-body-container\">\n      <CodeMirror\n        value={value}\n        options={{\n          theme,\n          keyMap: \"sublime\",\n          mode: \"typescript\",\n        }}\n        onBlur={tsChangeHandle}\n        // onChange={changeHandle}\n      />\n    </div>\n  );\n}\n\nexport default observer(ResponseTs);\n","/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestBody/index.tsx",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestTs/index.tsx",[],"/Users/lishengang/my/soft-mock-template/src/utils/index.ts",[],"/Users/lishengang/my/soft-mock-template/src/utils/uuid.ts",[],"/Users/lishengang/my/soft-mock-template/src/components/RightArea/components/RequestSetting/index.tsx",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":3,"column":10,"nodeType":"106","messageId":"107","endLine":3,"endColumn":15},{"ruleId":"104","severity":1,"message":"108","line":3,"column":39,"nodeType":"106","messageId":"107","endLine":3,"endColumn":44},{"ruleId":"109","severity":1,"message":"110","line":103,"column":6,"nodeType":"111","endLine":103,"endColumn":8,"suggestions":"112"},{"ruleId":"104","severity":1,"message":"105","line":2,"column":10,"nodeType":"106","messageId":"107","endLine":2,"endColumn":15},{"ruleId":"104","severity":1,"message":"108","line":2,"column":17,"nodeType":"106","messageId":"107","endLine":2,"endColumn":22},{"ruleId":"104","severity":1,"message":"113","line":2,"column":24,"nodeType":"106","messageId":"107","endLine":2,"endColumn":30},{"ruleId":"104","severity":1,"message":"114","line":28,"column":12,"nodeType":"106","messageId":"107","endLine":28,"endColumn":19},{"ruleId":"109","severity":1,"message":"115","line":67,"column":6,"nodeType":"111","endLine":67,"endColumn":32,"suggestions":"116"},{"ruleId":"104","severity":1,"message":"105","line":2,"column":10,"nodeType":"106","messageId":"107","endLine":2,"endColumn":15},{"ruleId":"104","severity":1,"message":"108","line":2,"column":17,"nodeType":"106","messageId":"107","endLine":2,"endColumn":22},{"ruleId":"104","severity":1,"message":"113","line":2,"column":24,"nodeType":"106","messageId":"107","endLine":2,"endColumn":30},{"ruleId":"109","severity":1,"message":"117","line":32,"column":6,"nodeType":"111","endLine":32,"endColumn":22,"suggestions":"118"},{"ruleId":"109","severity":1,"message":"119","line":51,"column":6,"nodeType":"111","endLine":51,"endColumn":30,"suggestions":"120"},{"ruleId":"109","severity":1,"message":"121","line":51,"column":7,"nodeType":"122","endLine":51,"endColumn":29},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"@typescript-eslint/no-unused-vars","'Table' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUpdates'. Either include it or remove the dependency array.","ArrayExpression",["125"],"'Button' is defined but never used.","'menuKey' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'codeMode'. Either include it or remove the dependency array.",["126"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["127"],"React Hook useEffect has missing dependencies: 'updateCurrentRequest' and 'value'. Either include them or remove the dependency array.",["128"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},"Update the dependencies array to be: [getUpdates]",{"range":"137","text":"138"},"Update the dependencies array to be: [response?.html, response, codeMode]",{"range":"139","text":"140"},"Update the dependencies array to be: [currentRequest, value]",{"range":"141","text":"142"},"Update the dependencies array to be: [updateCurrentRequest, value]",{"range":"143","text":"144"},[3024,3026],"[getUpdates]",[2048,2074],"[response?.html, response, codeMode]",[1046,1062],"[currentRequest, value]",[1560,1584],"[updateCurrentRequest, value]"]